cd ../terraform-code

terraform init

IAM_role=`cat terraform.tfvars | grep customer_IAMrole | sed 's/.*= //' | tr -d '"'`

export TF_VAR_policy_name="CustomerManaged_Databricks_E2_shard_deploy_$IAM_role"

terraform import module.role.aws_iam_role.onecloud_role $IAM_role >> role_import_$IAM_role.txt

if [ `cat role_import_$IAM_role.txt | grep "Import successful"| wc -l` -ne 0 ]
 then
	echo "####importing role successfull#####"

  #rm role_import_$IAM_role.txt

	echo "####Running terraform apply##### \n  "

	terraform apply -auto-approve

  relay=`terraform output relay-id | tr -d '"'`
  restapi=`terraform output rest-api-id | tr -d '"'`
  export TF_VAR_vpcID=`terraform output VPC_ID | tr -d '"'`
  export TF_VAR_deployedhost=`terraform output databricks_url| tr -d '"'`
  workspace_ID=`terraform output workspace_id | tr -d '"'`

  if [ -z `$workspace_ID` ]
    then
      echo "####workspace deployment complete#### \n ####creating cluster creation policy and group##### \n"

       cd ../terraform-code/workspace-manage

       terraform init

       echo "###creating cluster creation policy###"

       terraform apply -auto-approve

       echo "workspace $TF_VAR_deployedhost is deployed \n"
       echo "Workspace ID = $workspace_ID"

       cd ../rest-relay-DNS-enable

       terraform init

       terraform import aws_vpc_endpoint.Relay_endpoint_dns $relay
       terraform import aws_vpc_endpoint.Rest-api_endpoint_dns $restapi

 	     terraform apply -auto-approve

       rest_DNS_status=`terraform output rest-dns-enable-status | tr -d '"'`
       relay_DNS_status=`terraform output relay-dns-enable-status | tr -d '"'`

       echo "DNS status rest_DNS_status=$rest_DNS_status \n relay_DNS_status=$relay_DNS_status"

  else
      echo "####Workspace deployment failed, please check the errors####"
  fi
else
        echo "!!!!!!!check the role created!!!!!!!!"
fi
